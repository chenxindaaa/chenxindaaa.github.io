<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>强化学习中的off-line, on-line, off policy, on policy傻傻分不清</title>
    <link href="/Artificial-Intelligence/RL/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84off-line,%20on-line,%20off%20policy,%20on%20policy%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85/"/>
    <url>/Artificial-Intelligence/RL/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84off-line,%20on-line,%20off%20policy,%20on%20policy%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://blog.csdn.net/qq_42743778/article/details/120063861">https://blog.csdn.net/qq_42743778/article/details/120063861</a></p><p><a href="https://zhuanlan.zhihu.com/p/346433931">https://zhuanlan.zhihu.com/p/346433931</a></p>]]></content>
    
    
    <categories>
      
      <category>Artificial Intelligence</category>
      
      <category>RL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode</title>
    <link href="/Programming/Leetcode/Leetcode/"/>
    <url>/Programming/Leetcode/Leetcode/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1/">1.两数之和</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：2.两数相加/">2.两数相加</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode3/">3.无重复字符的最长子串</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：4.寻找两个有序数组的中位数/">4.寻找两个有序数组的中位数</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：5.最长回文子串/">5.最长回文子串</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：7.整数反转/">7.整数反转</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：8.字符串转换整数/">8.字符串转换整数</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：9.回文数/">9.回文数</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode10/">10.正则表达式匹配</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：11.盛最多水的容器/">11.盛最多水的容器</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode13/">13. 罗马数字转整数</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：14.最长公共前缀/">14.最长公共前缀</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：15.三数之和/">15.三数之和</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：16.最接近的三数之和/">16.最接近的三数之和</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode17/">17. 电话号码的字母组合</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode19/">19. 删除链表的倒数第 N 个结点</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：20.有效的括号/">20.有效的括号</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：21.合并两个有序链表/">21.合并两个有序链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode22/">22. 括号生成</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：23.合并K个排序链表/">23.合并K个排序链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode24/">24. 两两交换链表中的节点</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode25/">25. K 个一组翻转链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：26.删除排序数组中重复的项/">26.删除排序数组中重复的项</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode27/">27. 移除元素</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：33.搜索旋转排序数组/">33.搜索旋转排序数组</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：43.字符串相乘/">43.字符串相乘</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode44/">44. 通配符匹配</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：46.全排列/">46.全排列</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：53.最大子序和/">53.最大子序和</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：54.螺旋矩阵/">54.螺旋矩阵</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode55/">55. 跳跃游戏</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：59.螺旋矩阵二/">59.螺旋矩阵二</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：61.旋转链表/">61.旋转链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：62.不同路径/">62.不同路径</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：70.爬楼梯/">70.爬楼梯</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：78.子集/">78.子集</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode82/">82. 删除排序链表中的重复元素 II</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：88.合并两个有序数组/">88.合并两个有序数组</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：89.格雷编码/">89.格雷编码</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode94/">94. 二叉树的中序遍历</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode95/">95. 不同的二叉搜索树 II</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode99/">99. 恢复二叉搜索树</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode100/">100.相同的树</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode101/">101. 对称二叉树</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：104.二叉树最大深度/">104.二叉树最大深度</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode105/">105. 从前序与中序遍历序列构造二叉树</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode106/">106. 从中序与后序遍历序列构造二叉树</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode108/">108. 将有序数组转换为二叉搜索树</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：121.买卖股票的最佳时机/">121.买卖股票的最佳时机</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：122.买卖股票的最佳时机II/">122.买卖股票的最佳时机II</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：124.二叉树最大路径和/">124.二叉树最大路径和</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode134/">134. 加油站</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：136.只出现一次的数字/">136.只出现一次的数字</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：141.环形链表/">141.环形链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：142.环形链表II/">142.环形链表II</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：146.LRU缓存机制/">146.LRU缓存机制</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：148.排序链表/">148.排序链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：155.最小栈/">155.最小栈</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：160.相交链表/">160.相交链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：169.众数/">169.众数</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode203/">203. 移除链表元素</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：206.反转链表/">206.反转链表</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode208/">208. 实现 Trie (前缀树)</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：215.数组中的第K个最大元素/">215.数组中的第K个最大元素</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：217.存在重复元素/">217.存在重复元素</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：230.二叉搜索树中第K小的元素/">230.二叉搜索树中第K小的元素</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：231.2的幂/">231.2的幂</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：235.二叉搜索树的最近公共祖先/">235.二叉搜索树的最近公共祖先</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：236.二叉树的最近公共祖先/">236.二叉树的最近公共祖先</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：237.%20删除链表中的节点/">237. 删除链表中的节点</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：238.%20除自身以外数组的乘积/">238. 除自身以外数组的乘积</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：292.%20Nim%20游戏/">292. Nim 游戏</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode322/">322. 零钱兑换</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：344.%20反转字符串/">344. 反转字符串</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode392/">392. 判断子序列</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode415/">415. 字符串相加</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode435/">435. 无重叠区间</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode455/">455. 分发饼干</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode516/">516. 最长回文子序列</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode实战：557.%20反转字符串中的单词%20III/">557. 反转字符串中的单词 III</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1012/">1012. 至少有 1 位重复的数字</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1143/">1143. 最长公共子序列</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1260/">1260. 二维网格迁移</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1487/">1487. 保证文件名唯一</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1605/">1605. 给定行和列的和求可行矩阵</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1615/">1615. 最大网络秩</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1626/">1626. 无矛盾的最佳球队</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1653/">1653. 使字符串平衡的最少删除次数</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1721/">1721. 交换链表中的节点</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1775/">1775. 通过最少操作次数使数组的和相等</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1780/">1780. 判断一个数字是否可以表示成三的幂的和</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode1812/">1812. 判断国际象棋棋盘中一个格子的颜色</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode2363/">2363. 合并相似的物品</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode2373/">2373. 矩阵中的局部最大值</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode2379/">2379. 得到 K 个黑块的最少涂色次数</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode2383/">2383. 赢得比赛需要的最少训练时长</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode2389/">2389. 和有限的最长子序列</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode2469/">2469. 温度转换</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/Leetcode2488/">2488. 统计中位数为 K 的子数组</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/offer16/">剑指 Offer 16. 数值的整数次方</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/offer47/">剑指 Offer 47. 礼物的最大价值</a></p><p><a href="https://chenxindaaa.com/Programming/Leetcode/Leetcode/面试题05.02/">面试题 05.02. 二进制数转字符串</a></p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/Programming/Docker/Docker/"/>
    <url>/Programming/Docker/Docker/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="docker教程">Docker教程</h1><h2 id="一docker三要素">一、Docker三要素：</h2><ol type="1"><li>image <span class="math inline">\(\rightarrow\)</span> class</li><li>container <span class="math inline">\(\rightarrow\)</span> instance</li><li>repository <span class="math inline">\(\rightarrow\)</span> 存放image的场所，官方registry称为Docker Hub</li></ol><h2 id="二安装">二、安装</h2><p><a href="https://docs.docker.com/engine/">步骤</a></p><p><code>Note：Set up the repository</code></p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云镜像加速</a></p><h2 id="三docker常用命令">三、Docker常用命令</h2><h3 id="帮助启动类命令">3.1 帮助启动类命令</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start docker  <span class="hljs-comment"># 启动docker</span><br><span class="hljs-params">system</span>ctl stop docker  <span class="hljs-comment"># 停止docker</span><br><span class="hljs-params">system</span>ctl restart docker  <span class="hljs-comment"># 重启docker</span><br><span class="hljs-params">system</span>ctl status docker  <span class="hljs-comment"># 查看docker状态</span><br><span class="hljs-params">system</span>ctl enable docker  <span class="hljs-comment"># 开机启动</span><br>docker info  <span class="hljs-comment"># 查看docker概要信息</span><br>docker --help  <span class="hljs-comment"># 查看docker总体帮助文档</span><br>docker 具体命令 --help  <span class="hljs-comment"># 查看docker命令帮助文档</span><br></code></pre></td></tr></table></figure><h3 id="镜像命令">3.2 镜像命令</h3><ul><li>docker images [OPTIONS]：列出本地主机上的镜像<ul><li>各个选项说明: REPOSITORY：表示镜像的仓库源 TAG：镜像的标签版本号 IMAGE ID：镜像ID CREATED：镜像创建时间 SIZE：镜像大小 同一仓库源可以有多个 TAG版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</li><li>OPTIONS说明：<ul><li>-a :列出本地所有的镜像（含历史映像层）</li><li>-q :只显示镜像ID。</li></ul></li></ul></li><li>docker search [OPTIONS] 镜像名字：搜索镜像<ul><li>OPTIONS说明：<ul><li>--limit : 只列出N个镜像，默认25个 e.g. docker search --limit 5 redis</li></ul></li></ul></li><li>docker pull 某个XXX镜像名字：下载镜像<ul><li>docker pull 镜像名字:[TAG] 没有TAG就是最新版等价于docker pull 镜像名字:latest</li></ul></li><li>docker system df：查看镜像/容器/数据卷所占的空间</li><li>docker rmi 某个XXX镜像名字ID：删除镜像<ul><li>删除单个 docker rmi -f 镜像ID</li><li>删除多个 docker rmi -f 镜像名1:TAG 镜像名2:TAG</li><li>删除全部 docker rmi -f $(docker images -qa) ### 3.3 容器命令</li></ul></li><li>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]：新建+启动容器<ul><li>OPTIONS说明：有些是一个减号，有些是两个减号<ul><li>--name="容器新名字" 为容器指定一个名称；</li><li>-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；</li><li>启动交互式容器(前台有伪终端，等待交互)<ul><li>-i：以交互模式运行容器，通常与 -t 同时使用；(interactive)</li><li>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；(terminal)</li><li>e.g. docker run -it ubuntu /bin/bash： 使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令 /bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。要退出终端，直接输入 exit:</li></ul></li><li>-P: 随机端口映射，大写P</li><li>-p: 指定端口映射，小写p</li></ul></li></ul></li><li>docker ps [OPTIONS]：·列出当前所有正在运行的容器<ul><li>OPTIONS说明<ul><li>-a：列出当前所有正在运行的容器+历史上运行过的</li><li>-l：显示最近创建的容器。</li><li>-n：显示最近n个创建的容器。</li><li>-q：静默模式，只显示容器编号。</li></ul></li></ul></li><li>退出容器 关系 指向 进入正在运行的容器并以命令行交互 ·两种退出方式 ·exit ·run进去容器，exit退出，容器停止 ·ctrl+p+q ·run进去容器，ctrl+p+q退出，容器不停止 ·启动已停止运行的容器 ·docker start 容器ID或者容器名</li><li>重启容器 ·docker restart 容器ID或者容器名 ·停止容器 ·docker stop 容器ID或者容器名 ·强制停止容器 ·docker kill 容器ID或容器名 ·删除已停止的容器 ·docker rm 容器ID ·一次性删除多个容器实例 ·docker rm -f $(docker ps -a -q) ·docker ps -a -q | xargs docker rm</li></ul><h2 id="reference">Reference:</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1gr4y1U7CY?p=1&amp;vd_source=bd05c11d5f9bf6d6b4849b57473d2194">尚硅谷Docker实战教程</a> <a href="https://space.bilibili.com/393424102">JJacobb</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CMake</title>
    <link href="/Programming/C-C/CMake/CMake/"/>
    <url>/Programming/C-C/CMake/CMake/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="最小配置示例">最小配置示例</h1><h2 id="cmakelists.txt">CMakelists.txt</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">cmake<span class="hljs-constructor">_minimum_required(VERSION 3.0)</span>  # cmake最低版本<br>project(sample CXX)  # 项目名称<br>add<span class="hljs-constructor">_library(<span class="hljs-params">sample</span> <span class="hljs-params">sample</span>.<span class="hljs-params">cpp</span>)</span>  # 添加库<br>add<span class="hljs-constructor">_executable(<span class="hljs-params">sample_exe</span> <span class="hljs-params">sample_exe</span>.<span class="hljs-params">cpp</span>)</span>  # 添加可执行程序<br></code></pre></td></tr></table></figure><h2 id="相关函数">相关函数</h2><ul><li>project：定义工程名称，并可指定工程支持的语言<ul><li>project(projectname [CXX] [C] [Java][C CXX])</li><li>项目对应的变量：<ul><li>PROJECT_NAME：项目名称</li><li>PROJECT_SOURCE_DIR：项目源码根目录</li><li>PROJECT_VERSION：项目版本</li><li>PROJECT_BINARY_DIR：项目生成的临时二进制目录，用于存放配置/编译中间文件。</li></ul></li></ul></li><li>add_library：生成库文件<ul><li>add_library(libname [SHARED|STATIC|MODULE][EXCLUDE_FROM_ALL] source)<ul><li>libname： 库名称</li><li>source：源文件，可以使用列表变量，也可以直接添加源文件名称，还可以使用函数 target_source 添加源文件</li><li>SHARED：声明该库仅被作为动态库生成</li><li>STATIC 声明该库仅被作为静态库生成</li></ul></li></ul></li><li>add_executable：生成可执行文件<ul><li>add_executable(exename source)</li></ul></li></ul><h2 id="生成项目">生成项目</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang">cmake -G <span class="hljs-string">&quot;Unix Makefiles&quot;</span> ..<br>make<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cmake.exe -S .<span class="hljs-regexp">/sample -B ./</span>sample/binary -G <span class="hljs-string">&quot;Visual Studio 16 2019&quot;</span> -A x64<br>cmake.exe --build .<span class="hljs-regexp">/sample/</span>binary<br></code></pre></td></tr></table></figure><h3 id="命令行参数">命令行参数</h3><ul><li>-S 顶级CMakeLists.txt（包含project声明）所在路径。</li><li>-B 存放临时编译的二进制文件（.obj、.ilk等）和编译器对应的配置文件路径。</li><li>-G 编译器名称</li><li>-A 架构名称</li><li>-D 使用该变量以向cmake传入各种参数，包括选项及覆盖cmake提供的各种默认变量值。</li><li>--toolchain cmake toolchain文件路径。</li><li>--install-prefix 安装的二进制存放路径。</li><li>--trace / --trace-expand 调试时使用，用于打印已执行的cmake代码及行号。否则仅输出函数message中的内容。</li><li>--build 使用cmake直接调用编译器编译项目。</li><li>--config 选择需要编译的项目配置类型。</li><li>--install 安装已编译好的二进制文件至 CMAKE_INSTALL_PREFIX 中。</li></ul><h1 id="依赖管理">依赖管理</h1><h2 id="查找依赖">查找依赖</h2><ul><li><p><a href="https://link.zhihu.com/?target=https://cmake.org/cmake/help/latest/command/find_package.html#id7">find_package</a>：使用预先设置的配置文件来查找依赖项 <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs inform7">find_package(PACKAGE_NAME_CASE_SENSITIVE<br>             <span class="hljs-comment">[version]</span> <span class="hljs-comment">[EXACT]</span> <span class="hljs-comment">[QUIET]</span><br>             <span class="hljs-comment">[REQUIRED]</span> <span class="hljs-comment">[<span class="hljs-comment">[COMPONENTS]</span> <span class="hljs-comment">[components...]</span>]</span><br>             <span class="hljs-comment">[OPTIONAL_COMPONENTS components...]</span><br>             <span class="hljs-comment">[CONFIG|NO_MODULE]</span><br>             <span class="hljs-comment">[NO_POLICY_SCOPE]</span><br>             <span class="hljs-comment">[NAMES name1 <span class="hljs-comment">[name2 ...]</span>]</span><br>             <span class="hljs-comment">[CONFIGS config1 <span class="hljs-comment">[config2 ...]</span>]</span><br>             <span class="hljs-comment">[HINTS path1 <span class="hljs-comment">[path2 ... ]</span>]</span><br>             <span class="hljs-comment">[PATHS path1 <span class="hljs-comment">[path2 ... ]</span>]</span><br>             <span class="hljs-comment">[PATH_SUFFIXES suffix1 <span class="hljs-comment">[suffix2 ...]</span>]</span><br>             <span class="hljs-comment">[NO_DEFAULT_PATH]</span><br>             <span class="hljs-comment">[NO_PACKAGE_ROOT_PATH]</span><br>             <span class="hljs-comment">[NO_CMAKE_PATH]</span><br>             <span class="hljs-comment">[NO_CMAKE_ENVIRONMENT_PATH]</span><br>             <span class="hljs-comment">[NO_SYSTEM_ENVIRONMENT_PATH]</span><br>             <span class="hljs-comment">[NO_CMAKE_PACKAGE_REGISTRY]</span><br>             <span class="hljs-comment">[NO_CMAKE_BUILDS_PATH]</span> # Deprecated; does nothing.<br>             <span class="hljs-comment">[NO_CMAKE_SYSTEM_PATH]</span><br>             <span class="hljs-comment">[NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]</span><br>             <span class="hljs-comment">[CMAKE_FIND_ROOT_PATH_BOTH |</span><br><span class="hljs-comment">              ONLY_CMAKE_FIND_ROOT_PATH |</span><br><span class="hljs-comment">              NO_CMAKE_FIND_ROOT_PATH)</span><br></code></pre></td></tr></table></figure></p><p>常用参数：</p><ul><li>PACKAGE_NAME_CASE_SENSITIVE 查找的库的名称，大小写敏感，与之对应的是调用了包含此名称的配置文件。</li><li>version 依赖的版本号。如果依赖的配置同时提供了版本文件，则会使用该值对比配置中的版本而确定是否可以使用。</li><li>EXACT 版本号必须严格对应配置中的版本号。</li><li>QUIET 关闭了查找信息（不包含查找失败/错误信息）的输出。</li><li>REQUIRED 如果库没找到就报错。</li><li>CONFIG 该关键字声明了需要使用 依赖项通过自己的cmake代码 使用cmake 自动生成的 配置文件，入口配置文件名称一般为 <LOW_CASE_PACKAGE_NAME>-config.cmake 或 <ALL_CASE_PACKAGE_NAME>Config.cmake 。</li></ul></li><li><p>find_library：原始的cmake查找依赖方式，直接查找依赖项库文件。 <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">find_library (<br>          &lt;<span class="hljs-symbol">LIBRARY_NAME</span>&gt;<br>          name | <span class="hljs-symbol">NAMES</span> name1 [name2 ...] [<span class="hljs-symbol">NAMES_PER_DIR</span>]<br>          [<span class="hljs-symbol">HINTS</span> [path | <span class="hljs-symbol">ENV</span> var]... ]<br>          [<span class="hljs-symbol">PATHS</span> [path | <span class="hljs-symbol">ENV</span> var]... ]<br>          [<span class="hljs-symbol">PATH_SUFFIXES</span> suffix1 [suffix2 ...]]<br>          [<span class="hljs-symbol">DOC</span> <span class="hljs-string">&quot;cache documentation string&quot;</span>]<br>          [<span class="hljs-symbol">NO_CACHE</span>]<br>          [<span class="hljs-symbol">REQUIRED</span>]<br>          [<span class="hljs-symbol">NO_DEFAULT_PATH</span>]<br>          [<span class="hljs-symbol">NO_PACKAGE_ROOT_PATH</span>]<br>          [<span class="hljs-symbol">NO_CMAKE_PATH</span>]<br>          [<span class="hljs-symbol">NO_CMAKE_ENVIRONMENT_PATH</span>]<br>          [<span class="hljs-symbol">NO_SYSTEM_ENVIRONMENT_PATH</span>]<br>          [<span class="hljs-symbol">NO_CMAKE_SYSTEM_PATH</span>]<br>          [<span class="hljs-symbol">CMAKE_FIND_ROOT_PATH_BOTH</span> |<br>           <span class="hljs-symbol">ONLY_CMAKE_FIND_ROOT_PATH</span> |<br>           <span class="hljs-symbol">NO_CMAKE_FIND_ROOT_PATH</span>]<br>         )<br></code></pre></td></tr></table></figure></p><ul><li>LIBRARY_NAME：由于直接查找库文件而不是查找配置文件，此名称仅作为结果中宏的前缀使用。</li><li>NAMES：此项声明了库文件的名称。值得注意的是，在UNIX-style系统中，自动添加“lib”作为库名称的前缀。</li><li>NAMES_PER_DIR：一个名称遍历查找一次，再用另一个名称遍历查找一次。而不是根据路径使用多个名称遍历。</li><li>查找完成后：<ul><li>如果查找到，则会设置 LIBRARY_NAME 为查找到的库文件的名称（包含全路径）。</li><li>如果没有查找到，则会将 LIBRARY_NAME 设置为 <LIBRARY_NAME>-NOTFOUND 。</li></ul><p>所以这里和 find_package 又有不同，我们应当使用以下代码判断是否查找到:</p><p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-variable">PACKAGE_NAME</span> <span class="hljs-variable">MATCHES</span> <span class="hljs-string">&quot;-NOTFOUND&quot;</span>)<br>    <span class="hljs-function"><span class="hljs-title">message</span>(<span class="hljs-variable">FATAL_ERROR</span> <span class="hljs-string">&quot;$&#123;PACKAGE_NAME&#125; not found!&quot;</span>)</span><br><span class="hljs-function"><span class="hljs-title">endif</span>()</span><br></code></pre></td></tr></table></figure></p></li></ul></li><li><p>find_path：这个函数一般是查找头文件或其他的 非库文件 且 非可执行程序。其函数原型为： <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">find_path (<br>         &lt;<span class="hljs-symbol">FILE_NAME</span>&gt;<br>         name | <span class="hljs-symbol">NAMES</span> name1 [name2 ...]<br>         [<span class="hljs-symbol">HINTS</span> [path | <span class="hljs-symbol">ENV</span> var]... ]<br>         [<span class="hljs-symbol">PATHS</span> [path | <span class="hljs-symbol">ENV</span> var]... ]<br>         [<span class="hljs-symbol">PATH_SUFFIXES</span> suffix1 [suffix2 ...]]<br>         [<span class="hljs-symbol">DOC</span> <span class="hljs-string">&quot;cache documentation string&quot;</span>]<br>         [<span class="hljs-symbol">NO_CACHE</span>]<br>         [<span class="hljs-symbol">REQUIRED</span>]<br>         [<span class="hljs-symbol">NO_DEFAULT_PATH</span>]<br>         [<span class="hljs-symbol">NO_PACKAGE_ROOT_PATH</span>]<br>         [<span class="hljs-symbol">NO_CMAKE_PATH</span>]<br>         [<span class="hljs-symbol">NO_CMAKE_ENVIRONMENT_PATH</span>]<br>         [<span class="hljs-symbol">NO_SYSTEM_ENVIRONMENT_PATH</span>]<br>         [<span class="hljs-symbol">NO_CMAKE_SYSTEM_PATH</span>]<br>         [<span class="hljs-symbol">CMAKE_FIND_ROOT_PATH_BOTH</span> |<br>          <span class="hljs-symbol">ONLY_CMAKE_FIND_ROOT_PATH</span> |<br>          <span class="hljs-symbol">NO_CMAKE_FIND_ROOT_PATH</span>]<br>        )<br></code></pre></td></tr></table></figure> 一般情况下，由于需要cmake表达式来让cmake判断使用哪个配置的库，我们通常这么写：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">find_path</span><span class="hljs-params">(&lt;PACKAGE_NAME&gt;_INCLUDE_DIR NAMES header.h PATH_SUFFIXES include/...)</span></span><br><br><span class="hljs-function"><span class="hljs-title">find_library</span><span class="hljs-params">(&lt;PACKAGE_NAME&gt;_LIBRARY_RELEASE NAMES name1 name2)</span></span><br><span class="hljs-function"><span class="hljs-title">find_library</span><span class="hljs-params">(&lt;PACKAGE_NAME&gt;_LIBRARY_DEBUG NAMES name1d name2d)</span></span><br><span class="hljs-function"><span class="hljs-title">select_library_configurations</span><span class="hljs-params">(&lt;PACKAGE_NAME&gt;)</span></span><br>...<br>target_*(target_name $&#123;&lt;PACKAGE_NAME&gt;&#125;)<br></code></pre></td></tr></table></figure></li><li><p>find_program：这个函数专门用于查找可执行程序</p></li></ul><h2 id="使用依赖">使用依赖</h2><p>经过了上面的狂轰乱炸，我们终于可以使用依赖项了。我们可以将查找到的依赖项用于多个函数中，例如添加头文件路径，添加链接库，添加编译选项等。</p><p>对于不同的查找方式，配置文件或cmake提供了不同的使用方式：</p><ul><li><p>宏 例如 <PACKAGE_NAME>_INCLUDE_DIRS 和 <PACKAGE_NAME>_LIBRARIES 这种方式。</p><p>对于头文件来讲，直接加到include_directories中就好了。而对于库来讲，则复杂点：</p><p>由于不能混合使用debug库及release库，cmake必须明确知道在不同配置下使用哪个库。所以宏中一般使用到了cmake表达式来处理这种情况，比如： <span class="math inline">\(&lt;\)</span><CONFIG:DEBUG>:library.lib&gt; <span class="math inline">\(&lt;\)</span>{NOT:$<CONFIG:DEBUG>&gt;:libraryd.lib&gt; 所以我们在写配置时，尽量将debug和release库均查找后使用 select_library_configurations 来生成表达式以便不同配置下使用。</p></li><li><p>target target 就简单的多了，因为它是一个object，cmake函数可以轻松提取 target 包含的需要使用的属性来使用。 当然，target 包含非namespace与namespace两种形式，不过使用上没区别。 ## 内部依赖</p></li><li><p>add_dependencies： <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">add<span class="hljs-constructor">_dependencies(&lt;<span class="hljs-params">target</span>&gt; [&lt;<span class="hljs-params">target</span>-<span class="hljs-params">dependency</span>&gt;]<span class="hljs-operator">...</span>)</span><br></code></pre></td></tr></table></figure> 向前者添加依赖项（后者），可以添加多个。在编译或某些配置时，优先处理后者。</p></li></ul><h1 id="编译相关函数">编译相关函数</h1><h2 id="关键字">关键字</h2><ul><li><p>target target在cmake中是一个很重要的概念，可以理解为一个实例化对象， 一般是由add_executable()，add_library() 或 add_custom_target() 命令之一创建，它包含了例如以下内容：</p><ul><li>相关的源文件列表</li><li>相关的编译选项</li><li>相关的依赖库</li><li>相关的头文件路径列表</li><li>相关的库文件路径列表</li><li>相关的其他属性</li></ul></li><li>PUBLC PRIVATE INTERFACE 例如 target_link_libraries(A [PUBLIC/PRIVATE/INTERFACE] B)<ul><li>PUBLIC 依赖项B仅链接到目标A，若有C链接了目标A，C不链接依赖项B。</li><li>PRIVATE 依赖项B并不链接到目标A，若有C链接了目标A，C会链接依赖项B。</li><li>INTERFACE 依赖项B链接到目标A，若有C链接了目标A，C也会链接依赖项B。 &gt; <a href="https://www.jianshu.com/p/07761ff7838e">CMake 中的 PUBLIC，PRIVATE，INTERFACE</a></li></ul></li></ul><h2 id="相关函数-1">相关函数</h2><ul><li><p>target_compile_options：向目标添加编译选项 <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">target_compile_options(&lt;<span class="hljs-keyword">target</span>&gt; [BEFORE]<br>  &lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items1...]<br>  [&lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items2...] ...])<br></code></pre></td></tr></table></figure> 例如： <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">target<span class="hljs-constructor">_compile_options(<span class="hljs-params">sample</span> PUBLIC <span class="hljs-operator">/</span><span class="hljs-params">arch</span>=<span class="hljs-params">avx2</span> <span class="hljs-operator">/</span>Wall)</span><br></code></pre></td></tr></table></figure></p></li><li><p>target_compile_definitions：向目标添加预设宏声明及定义</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">target_compile_definitions(&lt;<span class="hljs-keyword">target</span>&gt;<br>  &lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items1...]<br>  [&lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items2...] ...])<br></code></pre></td></tr></table></figure> 例如： <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">target_compile_definitions</span><span class="hljs-params">(sample PRIVATE BUILD_DLL PUBLIC <span class="hljs-string">&quot;-DPI=3.14159&quot;</span>)</span></span><br></code></pre></td></tr></table></figure></li><li><p>target_include_directories：声明了编译目标时查找使用头文件的路径。</p><p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">target_include_directories(&lt;<span class="hljs-keyword">target</span>&gt; [SYSTEM] [AFTER|BEFORE]<br>  &lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items1...]<br>  [&lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items2...] ...])<br></code></pre></td></tr></table></figure></p>例如： <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">target<span class="hljs-constructor">_include_directories(<span class="hljs-params">sample</span> PUBLIC <span class="hljs-params">public</span><span class="hljs-operator">/</span><span class="hljs-params">include</span><span class="hljs-operator">/</span><span class="hljs-params">sample</span> PRIVATE <span class="hljs-params">sample</span>)</span><br></code></pre></td></tr></table></figure></li><li><p>target_link_libraries：声明了链接时需要参与的依赖库名称或target，其名称可包含完整路径。</p><p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">target_link_libraries(&lt;<span class="hljs-keyword">target</span>&gt;<br>  &lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items1...]<br>  [&lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items2...] ...])<br></code></pre></td></tr></table></figure> 例如： <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">target<span class="hljs-constructor">_link_libraries(<span class="hljs-params">sample</span> PUBLIC CURL::<span class="hljs-params">curl</span> <span class="hljs-params">glib</span> <span class="hljs-params">m</span>)</span><br></code></pre></td></tr></table></figure> 注意：由于一个target中包含多个属性，一般情况下包含了头文件路径。所以使用target作为参数传入此函数时，无需调用 target_include_directories 再次声明添加头文件路径。</p></li><li><p>target_link_libraries：声明了链接时查找依赖库的路径。 <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">target_link_libraries(&lt;<span class="hljs-keyword">target</span>&gt; [BEFORE]<br>  &lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items1...]<br>  [&lt;<span class="hljs-keyword">INTERFACE</span>|<span class="hljs-keyword">PUBLIC</span>|<span class="hljs-keyword">PRIVATE</span>&gt; [items2...] ...])<br></code></pre></td></tr></table></figure> 例如： <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">target<span class="hljs-constructor">_link_libraries(<span class="hljs-params">sample</span> PUBLIC <span class="hljs-params">third_party</span><span class="hljs-operator">/</span><span class="hljs-params">libs</span><span class="hljs-operator">/</span><span class="hljs-params">x86</span><span class="hljs-operator">/</span><span class="hljs-params">rel</span>)</span><br></code></pre></td></tr></table></figure></p></li></ul><h2 id="target族函数注意事项">target族函数注意事项</h2><p>当需要使用cmake export关键字导出声明的target并附带其中的 PUBLIC 属性时，我们必须 将PUBLIC / PRIVATE / INTERFACE 关键字向这类 target 族函数补齐。且如果一个 target 族函数声明了这三个关键字其中之一，该 target 所属的其他 target 族函数均应当声明关键字。且对于包含路径的值，我们需要声明此值的使用范围：</p><p>编译/链接时使用。必须使用绝对路径。 导出以向下游提供。必须使用相对路径。 所以，我们通常情况下使用以下方式：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">target_include_directories(sample <span class="hljs-variable constant_">PRIVATE</span> <span class="hljs-variable">$&lt;</span><span class="hljs-variable constant_">BUILD_INTERFACE</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">CMAKE_SOURCE_DIR</span>&#125;/header/<span class="hljs-keyword">include</span>&gt; <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-variable">$&lt;</span><span class="hljs-variable constant_">INSTALL_INTERFACE</span><span class="hljs-symbol">:include&gt;</span>)<br></code></pre></td></tr></table></figure><h1 id="reference">Reference</h1><p><a href="https://www.zhihu.com/column/c_1490802622991306752">CMake教程系列</a></p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>C/C++</category>
      
      <category>CMake</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Effective Academic Writing</title>
    <link href="/Research/Academic-Writing/Effective%20Academic%20Writing/"/>
    <url>/Research/Academic-Writing/Effective%20Academic%20Writing/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1e298c201dc0bfe76af7e192bc1de09f691f714bfdedfe8ecd7bf2ae38a305d6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Academic Writing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Dive into DL</title>
    <link href="/Artificial-Intelligence/DL/Dive%20into%20DL/"/>
    <url>/Artificial-Intelligence/DL/Dive%20into%20DL/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://chenxindaaa.com/Programming/Python/PyTorch/Dive%20into%20DL/Dive%20into%20DL-Linear%20Regression/">Linear Regression</a></p><p><a href="https://chenxindaaa.com/Artificial-Intelligence/DL/CV/Dive%20into%20DL/Dive%20into%20DL-Softmax%20Classification/">Softmax Classification</a></p><p><a href="https://chenxindaaa.com/Artificial-Intelligence/DL/CV/Dive%20into%20DL/Dive%20into%20DL-Multilayer%20Perceptron/">Multilayer Perceptron</a></p><p><a href="https://chenxindaaa.com/Artificial-Intelligence/DL/NLP/Dive%20into%20DL/Dive%20into%20DL-Text%20Prepare/">Text Prepare</a></p><p><a href="https://chenxindaaa.com/Artificial-Intelligence/DL/NLP/Dive%20into%20DL/Dive%20into%20DL-Language%20Model/">Language Model</a></p><p><a href="https://chenxindaaa.com/Artificial-Intelligence/DL/NLP/Dive%20into%20DL/Dive%20into%20DL-Recurrent%20Neural%20Network/">Recurrent Neural Network</a></p>]]></content>
    
    
    <categories>
      
      <category>Artificial Intelligence</category>
      
      <category>DL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Dive into DL: Multilayer Perceptron</title>
    <link href="/Artificial-Intelligence/DL/CV/Dive%20into%20DL/Dive%20into%20DL-Multilayer%20Perceptron/"/>
    <url>/Artificial-Intelligence/DL/CV/Dive%20into%20DL/Dive%20into%20DL-Multilayer%20Perceptron/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="多层感知机">多层感知机</h2><ol type="1"><li>多层感知机的基本知识</li><li>使用多层感知机图像分类的从零开始的实现</li><li>使用pytorch的简洁实现</li></ol><h2 id="多层感知机的基本知识">多层感知机的基本知识</h2><p>深度学习主要关注多层模型。在这里，我们将以多层感知机（multilayer perceptron，MLP）为例，介绍多层神经网络的概念。</p><h3 id="隐藏层">隐藏层</h3><p>下图展示了一个多层感知机的神经网络图，它含有一个隐藏层，该层中有5个隐藏单元。</p><figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ua2VzY2kuY29tL3VwbG9hZC9pbWFnZS9xNWhvNjg0am1oLnBuZw?x-oss-process=image/format,png" alt="Image Name" /><figcaption>Image Name</figcaption></figure><h3 id="表达公式">表达公式</h3><p>具体来说，给定一个小批量样本<span class="math inline">\(\boldsymbol{X} \in \mathbb{R}^{n \times d}\)</span>，其批量大小为<span class="math inline">\(n\)</span>，输入个数为<span class="math inline">\(d\)</span>。假设多层感知机只有一个隐藏层，其中隐藏单元个数为<span class="math inline">\(h\)</span>。记隐藏层的输出（也称为隐藏层变量或隐藏变量）为<span class="math inline">\(\boldsymbol{H}\)</span>，有<span class="math inline">\(\boldsymbol{H} \in \mathbb{R}^{n \times h}\)</span>。因为隐藏层和输出层均是全连接层，可以设隐藏层的权重参数和偏差参数分别为<span class="math inline">\(\boldsymbol{W}_h \in \mathbb{R}^{d \times h}\)</span>和 <span class="math inline">\(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\)</span>，输出层的权重和偏差参数分别为<span class="math inline">\(\boldsymbol{W}_o \in \mathbb{R}^{h \times q}\)</span>和<span class="math inline">\(\boldsymbol{b}_o \in \mathbb{R}^{1 \times q}\)</span>。</p><p>我们先来看一种含单隐藏层的多层感知机的设计。其输出<span class="math inline">\(\boldsymbol{O} \in \mathbb{R}^{n \times q}\)</span>的计算为</p><p><span class="math display">\[ \begin{aligned} \boldsymbol{H} &amp;= \boldsymbol{X} \boldsymbol{W}_h + \boldsymbol{b}_h,\\ \boldsymbol{O} &amp;= \boldsymbol{H} \boldsymbol{W}_o + \boldsymbol{b}_o, \end{aligned}\]</span></p><p>也就是将隐藏层的输出直接作为输出层的输入。如果将以上两个式子联立起来，可以得到</p><p><span class="math display">\[ \boldsymbol{O} = (\boldsymbol{X} \boldsymbol{W}_h + \boldsymbol{b}_h)\boldsymbol{W}_o + \boldsymbol{b}_o = \boldsymbol{X} \boldsymbol{W}_h\boldsymbol{W}_o + \boldsymbol{b}_h \boldsymbol{W}_o + \boldsymbol{b}_o. \]</span></p><p>从联立后的式子可以看出，虽然神经网络引入了隐藏层，却依然等价于一个单层神经网络：其中输出层权重参数为<span class="math inline">\(\boldsymbol{W}_h\boldsymbol{W}_o\)</span>，偏差参数为<span class="math inline">\(\boldsymbol{b}_h \boldsymbol{W}_o + \boldsymbol{b}_o\)</span>。不难发现，即便再添加更多的隐藏层，以上设计依然只能与仅含输出层的单层神经网络等价。</p><h3 id="激活函数">激活函数</h3><p>上述问题的根源在于全连接层只是对数据做仿射变换（affine transformation），而多个仿射变换的叠加仍然是一个仿射变换。解决问题的一个方法是引入非线性变换，例如对隐藏变量使用按元素运算的非线性函数进行变换，然后再作为下一个全连接层的输入。这个非线性函数被称为激活函数（activation function）。</p><p>下面我们介绍几个常用的激活函数：</p><h4 id="relu函数">ReLU函数</h4><p>ReLU（rectified linear unit）函数提供了一个很简单的非线性变换。给定元素<span class="math inline">\(x\)</span>，该函数定义为</p><p><span class="math display">\[\text{ReLU}(x) = \max(x, 0).\]</span></p><p>可以看出，ReLU函数只保留正数元素，并将负数元素清零。为了直观地观察这一非线性变换，我们先定义一个绘图函数xyplot。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;/home/kesci/input&quot;</span>)<br><span class="hljs-keyword">import</span> d2lzh1981 <span class="hljs-keyword">as</span> d2l<br><span class="hljs-built_in">print</span>(torch.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.3.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xyplot</span>(<span class="hljs-params">x_vals, y_vals, name</span>):<br>    <span class="hljs-comment"># d2l.set_figsize(figsize=(5, 2.5))</span><br>    plt.plot(x_vals.detach().numpy(), y_vals.detach().numpy())<br>    plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    plt.ylabel(name + <span class="hljs-string">&#x27;(x)&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.arange(-<span class="hljs-number">8.0</span>, <span class="hljs-number">8.0</span>, <span class="hljs-number">0.1</span>, requires_grad=<span class="hljs-literal">True</span>)<br>y = x.relu()<br>xyplot(x, y, <span class="hljs-string">&#x27;relu&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.kesci.com/rt_upload/070825B6A382411DA5BD7D14E67E8D54/q5hv7cdtna.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y.<span class="hljs-built_in">sum</span>().backward()<br>xyplot(x, x.grad, <span class="hljs-string">&#x27;grad of relu&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.kesci.com/rt_upload/BFB05150DBD1474D9A9ECCB9CDF1DD39/q5hv7c3pxb.png"></p><h4 id="sigmoid函数">Sigmoid函数</h4><p>sigmoid函数可以将元素的值变换到0和1之间：</p><p><span class="math display">\[\text{sigmoid}(x) = \frac{1}{1 + \exp(-x)}.\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y = x.sigmoid()<br>xyplot(x, y, <span class="hljs-string">&#x27;sigmoid&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.kesci.com/rt_upload/68FCB4E8142144458F13128B370D1C91/q5hv7dor11.png"></p><p>依据链式法则，sigmoid函数的导数</p><p><span class="math display">\[\text{sigmoid}&#39;(x) = \text{sigmoid}(x)\left(1-\text{sigmoid}(x)\right).\]</span></p><p>下面绘制了sigmoid函数的导数。当输入为0时，sigmoid函数的导数达到最大值0.25；当输入越偏离0时，sigmoid函数的导数越接近0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x.grad.zero_()<br>y.<span class="hljs-built_in">sum</span>().backward()<br>xyplot(x, x.grad, <span class="hljs-string">&#x27;grad of sigmoid&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.kesci.com/rt_upload/878C7B8823304F72860965E119A21412/q5hv7dpse9.png"></p><h4 id="tanh函数">tanh函数</h4><p>tanh（双曲正切）函数可以将元素的值变换到-1和1之间：</p><p><span class="math display">\[\text{tanh}(x) = \frac{1 - \exp(-2x)}{1 + \exp(-2x)}.\]</span></p><p>我们接着绘制tanh函数。当输入接近0时，tanh函数接近线性变换。虽然该函数的形状和sigmoid函数的形状很像，但tanh函数在坐标系的原点上对称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y = x.tanh()<br>xyplot(x, y, <span class="hljs-string">&#x27;tanh&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.kesci.com/rt_upload/92D16076309F42169482834C0B6ABB24/q5hv7dfeso.png"></p><p>依据链式法则，tanh函数的导数</p><p><span class="math display">\[\text{tanh}&#39;(x) = 1 - \text{tanh}^2(x).\]</span></p><p>下面绘制了tanh函数的导数。当输入为0时，tanh函数的导数达到最大值1；当输入越偏离0时，tanh函数的导数越接近0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x.grad.zero_()<br>y.<span class="hljs-built_in">sum</span>().backward()<br>xyplot(x, x.grad, <span class="hljs-string">&#x27;grad of tanh&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.kesci.com/rt_upload/CB16F4B33E664E14BCE8E52D8B37C47F/q5hv7ejc8y.png"></p><h3 id="关于激活函数的选择">关于激活函数的选择</h3><p>ReLu函数是一个通用的激活函数，目前在大多数情况下使用。但是，ReLU函数只能在隐藏层中使用。</p><p>用于分类器时，sigmoid函数及其组合通常效果更好。由于梯度消失问题，有时要避免使用sigmoid和tanh函数。</p><p>在神经网络层数较多的时候，最好使用ReLu函数，ReLu函数比较简单计算量少，而sigmoid和tanh函数计算量大很多。</p><p>在选择激活函数的时候可以先选用ReLu函数如果效果不理想可以尝试其他激活函数。</p><h3 id="多层感知机-1">多层感知机</h3><p>多层感知机就是含有至少一个隐藏层的由全连接层组成的神经网络，且每个隐藏层的输出通过激活函数进行变换。多层感知机的层数和各隐藏层中隐藏单元个数都是超参数。以单隐藏层为例并沿用本节之前定义的符号，多层感知机按以下方式计算输出：</p><p><span class="math display">\[ \begin{aligned} \boldsymbol{H} &amp;= \phi(\boldsymbol{X} \boldsymbol{W}_h + \boldsymbol{b}_h),\\ \boldsymbol{O} &amp;= \boldsymbol{H} \boldsymbol{W}_o + \boldsymbol{b}_o, \end{aligned} \]</span></p><p>其中<span class="math inline">\(\phi\)</span>表示激活函数。</p><h2 id="多层感知机从零开始的实现">多层感知机从零开始的实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;..&quot;</span>) <br><span class="hljs-keyword">import</span> d2lzh_pytorch <span class="hljs-keyword">as</span> d2l<br><span class="hljs-built_in">print</span>(torch.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.4.0+cpu</code></pre><h3 id="获取训练集">获取训练集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size,root=<span class="hljs-string">&#x27;./input/FashionMNIST2065&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="定义模型参数">定义模型参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs, num_outputs, num_hiddens = <span class="hljs-number">784</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span><br><br>W1 = torch.tensor(np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, (num_inputs, num_hiddens)), dtype=torch.<span class="hljs-built_in">float</span>)<br>b1 = torch.zeros(num_hiddens, dtype=torch.<span class="hljs-built_in">float</span>)<br>W2 = torch.tensor(np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, (num_hiddens, num_outputs)), dtype=torch.<span class="hljs-built_in">float</span>)<br>b2 = torch.zeros(num_outputs, dtype=torch.<span class="hljs-built_in">float</span>)<br><br>params = [W1, b1, W2, b2]<br><span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>    param.requires_grad_(requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="定义激活函数">定义激活函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">relu</span>(<span class="hljs-params">X</span>):<br>    <span class="hljs-keyword">return</span> torch.<span class="hljs-built_in">max</span>(<span class="hljs-built_in">input</span>=X, other=torch.tensor(<span class="hljs-number">0.0</span>))<br></code></pre></td></tr></table></figure><h3 id="定义网络">定义网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">net</span>(<span class="hljs-params">X</span>):<br>    X = X.view((-<span class="hljs-number">1</span>, num_inputs))<br>    H = relu(torch.matmul(X, W1) + b1)<br>    <span class="hljs-keyword">return</span> torch.matmul(H, W2) + b2<br></code></pre></td></tr></table></figure><h3 id="定义损失函数">定义损失函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = torch.nn.CrossEntropyLoss()<br></code></pre></td></tr></table></figure><h3 id="训练">训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs, lr = <span class="hljs-number">5</span>, <span class="hljs-number">100.0</span><br><span class="hljs-comment"># def train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size,</span><br><span class="hljs-comment">#               params=None, lr=None, optimizer=None):</span><br><span class="hljs-comment">#     for epoch in range(num_epochs):</span><br><span class="hljs-comment">#         train_l_sum, train_acc_sum, n = 0.0, 0.0, 0</span><br><span class="hljs-comment">#         for X, y in train_iter:</span><br><span class="hljs-comment">#             y_hat = net(X)</span><br><span class="hljs-comment">#             l = loss(y_hat, y).sum()</span><br><span class="hljs-comment">#             </span><br><span class="hljs-comment">#             # 梯度清零</span><br><span class="hljs-comment">#             if optimizer is not None:</span><br><span class="hljs-comment">#                 optimizer.zero_grad()</span><br><span class="hljs-comment">#             elif params is not None and params[0].grad is not None:</span><br><span class="hljs-comment">#                 for param in params:</span><br><span class="hljs-comment">#                     param.grad.data.zero_()</span><br><span class="hljs-comment">#            </span><br><span class="hljs-comment">#             l.backward()</span><br><span class="hljs-comment">#             if optimizer is None:</span><br><span class="hljs-comment">#                 d2l.sgd(params, lr, batch_size)</span><br><span class="hljs-comment">#             else:</span><br><span class="hljs-comment">#                 optimizer.step()  # “softmax回归的简洁实现”一节将用到</span><br><span class="hljs-comment">#             </span><br><span class="hljs-comment">#             </span><br><span class="hljs-comment">#             train_l_sum += l.item()</span><br><span class="hljs-comment">#             train_acc_sum += (y_hat.argmax(dim=1) == y).sum().item()</span><br><span class="hljs-comment">#             n += y.shape[0]</span><br><span class="hljs-comment">#         test_acc = evaluate_accuracy(test_iter, net)</span><br><span class="hljs-comment">#         print(&#x27;epoch %d, loss %.4f, train acc %.3f, test acc %.3f&#x27;</span><br><span class="hljs-comment">#               % (epoch + 1, train_l_sum / n, train_acc_sum / n, test_acc))</span><br><br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, params, lr)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.0030, train acc 0.713, test acc 0.774epoch 2, loss 0.0019, train acc 0.823, test acc 0.800epoch 3, loss 0.0017, train acc 0.845, test acc 0.838epoch 4, loss 0.0015, train acc 0.856, test acc 0.850epoch 5, loss 0.0014, train acc 0.865, test acc 0.849</code></pre><h2 id="多层感知机pytorch实现">多层感知机pytorch实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> init<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;..&quot;</span>) <br><span class="hljs-keyword">import</span> d2lzh_pytorch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-built_in">print</span>(torch.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.4.0+cpu</code></pre><h3 id="初始化模型和各个参数">初始化模型和各个参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs, num_outputs, num_hiddens = <span class="hljs-number">784</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span><br>    <br>net = nn.Sequential(<br>        d2l.FlattenLayer(),<br>        nn.Linear(num_inputs, num_hiddens),<br>        nn.ReLU(),<br>        nn.Linear(num_hiddens, num_outputs), <br>        )<br>    <br><span class="hljs-keyword">for</span> params <span class="hljs-keyword">in</span> net.parameters():<br>    init.normal_(params, mean=<span class="hljs-number">0</span>, std=<span class="hljs-number">0.01</span>)<br></code></pre></td></tr></table></figure><h3 id="训练-1">训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size,root=<span class="hljs-string">&#x27;/home/kesci/input/FashionMNIST2065&#x27;</span>)<br>loss = torch.nn.CrossEntropyLoss()<br><br>optimizer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.5</span>)<br><br>num_epochs = <span class="hljs-number">5</span><br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, optimizer)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.0032, train acc 0.696, test acc 0.683epoch 2, loss 0.0019, train acc 0.818, test acc 0.707epoch 3, loss 0.0017, train acc 0.841, test acc 0.817epoch 4, loss 0.0015, train acc 0.854, test acc 0.843epoch 5, loss 0.0015, train acc 0.864, test acc 0.855</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Artificial Intelligence</category>
      
      <category>DL</category>
      
      <category>Python</category>
      
      <category>PyTorch</category>
      
      <category>CV</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Dive into DL: Softmax Classification</title>
    <link href="/Artificial-Intelligence/DL/CV/Dive%20into%20DL/Dive%20into%20DL-Softmax%20Classification/"/>
    <url>/Artificial-Intelligence/DL/CV/Dive%20into%20DL/Dive%20into%20DL-Softmax%20Classification/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><meta name="referrer" content="no-referrer"/><h1 id="softmax和分类模型">softmax和分类模型</h1><p>内容包含： 1. softmax回归的基本概念 2. 如何获取Fashion-MNIST数据集和读取数据 3. softmax回归模型的从零开始实现，实现一个对Fashion-MNIST训练集中的图像数据进行分类的模型 4. 使用pytorch重新实现softmax回归模型</p><h2 id="softmax的基本概念">softmax的基本概念</h2><ul><li><p>分类问题<br />一个简单的图像分类问题，输入图像的高和宽均为2像素，色彩为灰度。<br />图像中的4像素分别记为<span class="math inline">\(x_1, x_2, x_3, x_4\)</span>。<br />假设真实标签为狗、猫或者鸡，这些标签对应的离散值为<span class="math inline">\(y_1, y_2, y_3\)</span>。<br />我们通常使用离散的数值来表示类别，例如<span class="math inline">\(y_1=1, y_2=2, y_3=3\)</span>。</p></li><li><p>权重矢量<br /><span class="math display">\[ \begin{aligned} o_1 &amp;= x_1 w_{11} + x_2 w_{21} + x_3 w_{31} + x_4 w_{41} + b_1 \end{aligned} \]</span></p></li></ul><p><span class="math display">\[ \begin{aligned} o_2 &amp;= x_1 w_{12} + x_2 w_{22} + x_3 w_{32} + x_4 w_{42} + b_2 \end{aligned} \]</span></p><p><span class="math display">\[ \begin{aligned} o_3 &amp;= x_1 w_{13} + x_2 w_{23} + x_3 w_{33} + x_4 w_{43} + b_3 \end{aligned} \]</span></p><ul><li>神经网络图<br />下图用神经网络图描绘了上面的计算。softmax回归同线性回归一样，也是一个单层神经网络。由于每个输出<span class="math inline">\(o_1, o_2, o_3\)</span>的计算都要依赖于所有的输入<span class="math inline">\(x_1, x_2, x_3, x_4\)</span>，softmax回归的输出层也是一个全连接层。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ua2VzY2kuY29tL3VwbG9hZC9pbWFnZS9xNWhteW1lem9nLnBuZw?x-oss-process=image/format,png" /></p><p><span class="math display">\[\begin{aligned}softmax回归是一个单层神经网络\end{aligned}\]</span></p><p>既然分类问题需要得到离散的预测输出，一个简单的办法是将输出值<span class="math inline">\(o_i\)</span>当作预测类别是<span class="math inline">\(i\)</span>的置信度，并将值最大的输出所对应的类作为预测输出，即输出 <span class="math inline">\(\underset{i}{\arg\max} o_i\)</span>。例如，如果<span class="math inline">\(o_1,o_2,o_3\)</span>分别为<span class="math inline">\(0.1,10,0.1\)</span>，由于<span class="math inline">\(o_2\)</span>最大，那么预测类别为2，其代表猫。</p><ul><li>输出问题<br />直接使用输出层的输出有两个问题：<ol type="1"><li>一方面，由于输出层的输出值的范围不确定，我们难以直观上判断这些值的意义。例如，刚才举的例子中的输出值10表示“很置信”图像类别为猫，因为该输出值是其他两类的输出值的100倍。但如果<span class="math inline">\(o_1=o_3=10^3\)</span>，那么输出值10却又表示图像类别为猫的概率很低。</li><li>另一方面，由于真实标签是离散值，这些离散值与不确定范围的输出值之间的误差难以衡量。</li></ol></li></ul><p>softmax运算符（softmax operator）解决了以上两个问题。它通过下式将输出值变换成值为正且和为1的概率分布：</p><p><span class="math display">\[ \hat{y}_1, \hat{y}_2, \hat{y}_3 = \text{softmax}(o_1, o_2, o_3) \]</span></p><p>其中</p><p><span class="math display">\[ \hat{y}1 = \frac{ \exp(o_1)}{\sum_{i=1}^3 \exp(o_i)},\quad \hat{y}2 = \frac{ \exp(o_2)}{\sum_{i=1}^3 \exp(o_i)},\quad \hat{y}3 = \frac{ \exp(o_3)}{\sum_{i=1}^3 \exp(o_i)}. \]</span></p><p>容易看出<span class="math inline">\(\hat{y}_1 + \hat{y}_2 + \hat{y}_3 = 1\)</span>且<span class="math inline">\(0 \leq \hat{y}_1, \hat{y}_2, \hat{y}_3 \leq 1\)</span>，因此<span class="math inline">\(\hat{y}_1, \hat{y}_2, \hat{y}_3\)</span>是一个合法的概率分布。这时候，如果<span class="math inline">\(\hat{y}_2=0.8\)</span>，不管<span class="math inline">\(\hat{y}_1\)</span>和<span class="math inline">\(\hat{y}_3\)</span>的值是多少，我们都知道图像类别为猫的概率是80%。此外，我们注意到</p><p><span class="math display">\[ \underset{i}{\arg\max} o_i = \underset{i}{\arg\max} \hat{y}_i \]</span></p><p>因此softmax运算不改变预测类别输出。</p><ul><li>计算效率<ul><li>单样本矢量计算表达式<br />为了提高计算效率，我们可以将单样本分类通过矢量计算来表达。在上面的图像分类问题中，假设softmax回归的权重和偏差参数分别为</li></ul></li></ul><p><span class="math display">\[ \boldsymbol{W} = \begin{bmatrix} w_{11} &amp; w_{12} &amp; w_{13} \\ w_{21} &amp; w_{22} &amp; w_{23} \\ w_{31} &amp; w_{32} &amp; w_{33} \\ w_{41} &amp; w_{42} &amp; w_{43} \end{bmatrix},\quad \boldsymbol{b} = \begin{bmatrix} b_1 &amp; b_2 &amp; b_3 \end{bmatrix}, \]</span></p><p>设高和宽分别为2个像素的图像样本<span class="math inline">\(i\)</span>的特征为</p><p><span class="math display">\[\boldsymbol{x}^{(i)} = \begin{bmatrix}x_1^{(i)} &amp; x_2^{(i)} &amp; x_3^{(i)} &amp; x_4^{(i)}\end{bmatrix},\]</span></p><p>输出层的输出为</p><p><span class="math display">\[\boldsymbol{o}^{(i)} = \begin{bmatrix}o_1^{(i)} &amp; o_2^{(i)} &amp; o_3^{(i)}\end{bmatrix},\]</span></p><p>预测为狗、猫或鸡的概率分布为</p><p><span class="math display">\[\boldsymbol{\hat{y}}^{(i)} = \begin{bmatrix}\hat{y}_1^{(i)} &amp; \hat{y}_2^{(i)} &amp; \hat{y}_3^{(i)}\end{bmatrix}.\]</span></p><p>softmax回归对样本<span class="math inline">\(i\)</span>分类的矢量计算表达式为</p><p><span class="math display">\[ \begin{aligned} \boldsymbol{o}^{(i)} &amp;= \boldsymbol{x}^{(i)} \boldsymbol{W} + \boldsymbol{b},\\ \boldsymbol{\hat{y}}^{(i)} &amp;= \text{softmax}(\boldsymbol{o}^{(i)}). \end{aligned} \]</span></p><ul><li>小批量矢量计算表达式<br />为了进一步提升计算效率，我们通常对小批量数据做矢量计算。广义上讲，给定一个小批量样本，其批量大小为<span class="math inline">\(n\)</span>，输入个数（特征数）为<span class="math inline">\(d\)</span>，输出个数（类别数）为<span class="math inline">\(q\)</span>。设批量特征为<span class="math inline">\(\boldsymbol{X} \in \mathbb{R}^{n \times d}\)</span>。假设softmax回归的权重和偏差参数分别为<span class="math inline">\(\boldsymbol{W} \in \mathbb{R}^{d \times q}\)</span>和<span class="math inline">\(\boldsymbol{b} \in \mathbb{R}^{1 \times q}\)</span>。softmax回归的矢量计算表达式为</li></ul><p><span class="math display">\[ \begin{aligned} \boldsymbol{O} &amp;= \boldsymbol{X} \boldsymbol{W} + \boldsymbol{b},\\ \boldsymbol{\hat{Y}} &amp;= \text{softmax}(\boldsymbol{O}), \end{aligned} \]</span></p><p>其中的加法运算使用了广播机制，<span class="math inline">\(\boldsymbol{O}, \boldsymbol{\hat{Y}} \in \mathbb{R}^{n \times q}\)</span>且这两个矩阵的第<span class="math inline">\(i\)</span>行分别为样本<span class="math inline">\(i\)</span>的输出<span class="math inline">\(\boldsymbol{o}^{(i)}\)</span>和概率分布<span class="math inline">\(\boldsymbol{\hat{y}}^{(i)}\)</span>。</p><h2 id="交叉熵损失函数">交叉熵损失函数</h2><p>对于样本<span class="math inline">\(i\)</span>，我们构造向量<span class="math inline">\(\boldsymbol{y}^{(i)}\in \mathbb{R}^{q}\)</span> ，使其第<span class="math inline">\(y^{(i)}\)</span>（样本<span class="math inline">\(i\)</span>类别的离散数值）个元素为1，其余为0。这样我们的训练目标可以设为使预测概率分布<span class="math inline">\(\boldsymbol{\hat y}^{(i)}\)</span>尽可能接近真实的标签概率分布<span class="math inline">\(\boldsymbol{y}^{(i)}\)</span>。</p><ul><li>平方损失估计</li></ul><p><span class="math display">\[\begin{aligned}Loss = |\boldsymbol{\hat y}^{(i)}-\boldsymbol{y}^{(i)}|^2/2\end{aligned}\]</span></p><p>然而，想要预测分类结果正确，我们其实并不需要预测概率完全等于标签概率。例如，在图像分类的例子里，如果<span class="math inline">\(y^{(i)}=3\)</span>，那么我们只需要<span class="math inline">\(\hat{y}^{(i)}_3\)</span>比其他两个预测值<span class="math inline">\(\hat{y}^{(i)}_1\)</span>和<span class="math inline">\(\hat{y}^{(i)}_2\)</span>大就行了。即使<span class="math inline">\(\hat{y}^{(i)}_3\)</span>值为0.6，不管其他两个预测值为多少，类别预测均正确。而平方损失则过于严格，例如<span class="math inline">\(\hat y^{(i)}_1=\hat y^{(i)}_2=0.2\)</span>比<span class="math inline">\(\hat y^{(i)}_1=0, \hat y^{(i)}_2=0.4\)</span>的损失要小很多，虽然两者都有同样正确的分类预测结果。</p><p>改善上述问题的一个方法是使用更适合衡量两个概率分布差异的测量函数。其中，交叉熵（cross entropy）是一个常用的衡量方法：</p><p><span class="math display">\[H\left(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}\right ) = -\sum_{j=1}^q y_j^{(i)} \log \hat y_j^{(i)},\]</span></p><p>其中带下标的<span class="math inline">\(y_j^{(i)}\)</span>是向量<span class="math inline">\(\boldsymbol y^{(i)}\)</span>中非0即1的元素，需要注意将它与样本<span class="math inline">\(i\)</span>类别的离散数值，即不带下标的<span class="math inline">\(y^{(i)}\)</span>区分。在上式中，我们知道向量<span class="math inline">\(\boldsymbol y^{(i)}\)</span>中只有第<span class="math inline">\(y^{(i)}\)</span>个元素<span class="math inline">\(y^{(i)}{y^{(i)}}\)</span>为1，其余全为0，于是<span class="math inline">\(H(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}) = -\log \hat y_{y^{(i)}}^{(i)}\)</span>。也就是说，交叉熵只关心对正确类别的预测概率，因为只要其值足够大，就可以确保分类结果正确。当然，遇到一个样本有多个标签时，例如图像里含有不止一个物体时，我们并不能做这一步简化。但即便对于这种情况，交叉熵同样只关心对图像中出现的物体类别的预测概率。</p><p>假设训练数据集的样本数为<span class="math inline">\(n\)</span>，交叉熵损失函数定义为 <span class="math display">\[\ell(\boldsymbol{\Theta}) = \frac{1}{n} \sum_{i=1}^n H\left(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}\right ),\]</span></p><p>其中<span class="math inline">\(\boldsymbol{\Theta}\)</span>代表模型参数。同样地，如果每个样本只有一个标签，那么交叉熵损失可以简写成<span class="math inline">\(\ell(\boldsymbol{\Theta}) = -(1/n) \sum_{i=1}^n \log \hat y_{y^{(i)}}^{(i)}\)</span>。从另一个角度来看，我们知道最小化<span class="math inline">\(\ell(\boldsymbol{\Theta})\)</span>等价于最大化<span class="math inline">\(\exp(-n\ell(\boldsymbol{\Theta}))=\prod_{i=1}^n \hat y_{y^{(i)}}^{(i)}\)</span>，即最小化交叉熵损失函数等价于最大化训练数据集所有标签类别的联合预测概率。</p><h2 id="模型训练和预测">模型训练和预测</h2><p>在训练好softmax回归模型后，给定任一样本特征，就可以预测每个输出类别的概率。通常，我们把预测概率最大的类别作为输出类别。如果它与真实类别（标签）一致，说明这次预测是正确的。在3.6节的实验中，我们将使用准确率（accuracy）来评价模型的表现。它等于正确预测数量与总预测数量之比。</p><h1 id="获取fashion-mnist训练集和读取数据">获取Fashion-MNIST训练集和读取数据</h1><p>在介绍softmax回归的实现前我们先引入一个多类图像分类数据集。它将在后面的章节中被多次使用，以方便我们观察比较算法之间在模型精度和计算效率上的区别。图像分类数据集中最常用的是手写数字识别数据集MNIST[1]。但大部分模型在MNIST上的分类精度都超过了95%。为了更直观地观察算法之间的差异，我们将使用一个图像内容更加复杂的数据集Fashion-MNIST[2]。</p><p>我这里我们会使用torchvision包，它是服务于PyTorch深度学习框架的，主要用来构建计算机视觉模型。torchvision主要由以下几部分构成： 1. torchvision.datasets: 一些加载数据的函数及常用的数据集接口； 2. torchvision.models: 包含常用的模型结构（含预训练模型），例如AlexNet、VGG、ResNet等； 3. torchvision.transforms: 常用的图片变换，例如裁剪、旋转等； 4. torchvision.utils: 其他的一些有用的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import needed package</span><br>%matplotlib inline<br><span class="hljs-keyword">from</span> IPython <span class="hljs-keyword">import</span> display<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> transforms<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;..&quot;</span>) <br><span class="hljs-keyword">import</span> d2lzh_pytorch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-built_in">print</span>(torch.__version__)<br><span class="hljs-built_in">print</span>(torchvision.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.4.0+cpu0.5.0+cpu</code></pre><h2 id="get-dataset">get dataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mnist_train = torchvision.datasets.FashionMNIST(root=<span class="hljs-string">&#x27;./input/FashionMNIST2065&#x27;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>, transform=transforms.ToTensor())<br>mnist_test = torchvision.datasets.FashionMNIST(root=<span class="hljs-string">&#x27;./input/FashionMNIST2065&#x27;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>, transform=transforms.ToTensor())<br></code></pre></td></tr></table></figure><p>class torchvision.datasets.FashionMNIST(root, train=True, transform=None, target_transform=None, download=False) - root（string）– 数据集的根目录，其中存放processed/training.pt和processed/test.pt文件。 - train（bool, 可选）– 如果设置为True，从training.pt创建数据集，否则从test.pt创建。 - download（bool, 可选）– 如果设置为True，从互联网下载数据并放到root文件夹下。如果root目录下已经存在数据，不会再次下载。 - transform（可被调用 , 可选）– 一种函数或变换，输入PIL图片，返回变换之后的数据。如：transforms.RandomCrop。 - target_transform（可被调用 , 可选）– 一种函数或变换，输入目标，进行变换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># show result </span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mnist_train))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mnist_train), <span class="hljs-built_in">len</span>(mnist_test))<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;torchvision.datasets.mnist.FashionMNIST&#39;&gt;60000 10000</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 我们可以通过下标来访问任意一个样本</span><br>feature, label = mnist_train[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(feature.shape, label)  <span class="hljs-comment"># Channel x Height x Width</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">torch.Size([1, 28, 28]) 9</code></pre><p>如果不做变换输入的数据是图像，我们可以看一下图片的类型参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mnist_PIL = torchvision.datasets.FashionMNIST(root=<span class="hljs-string">&#x27;/home/kesci/input/FashionMNIST2065&#x27;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>)<br>PIL_feature, label = mnist_PIL[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(PIL_feature)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;PIL.Image.Image image mode=L size=28x28 at 0x2C0A7BB9488&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 本函数已保存在d2lzh包中方便以后使用</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_fashion_mnist_labels</span>(<span class="hljs-params">labels</span>):<br>    text_labels = [<span class="hljs-string">&#x27;t-shirt&#x27;</span>, <span class="hljs-string">&#x27;trouser&#x27;</span>, <span class="hljs-string">&#x27;pullover&#x27;</span>, <span class="hljs-string">&#x27;dress&#x27;</span>, <span class="hljs-string">&#x27;coat&#x27;</span>,<br>                   <span class="hljs-string">&#x27;sandal&#x27;</span>, <span class="hljs-string">&#x27;shirt&#x27;</span>, <span class="hljs-string">&#x27;sneaker&#x27;</span>, <span class="hljs-string">&#x27;bag&#x27;</span>, <span class="hljs-string">&#x27;ankle boot&#x27;</span>]<br>    <span class="hljs-keyword">return</span> [text_labels[<span class="hljs-built_in">int</span>(i)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> labels]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_fashion_mnist</span>(<span class="hljs-params">images, labels</span>):<br>    d2l.use_svg_display()<br>    <span class="hljs-comment"># 这里的_表示我们忽略（不使用）的变量</span><br>    _, figs = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(images), figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">12</span>))<br>    <span class="hljs-keyword">for</span> f, img, lbl <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(figs, images, labels):<br>        f.imshow(img.view((<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)).numpy())<br>        f.set_title(lbl)<br>        f.axes.get_xaxis().set_visible(<span class="hljs-literal">False</span>)<br>        f.axes.get_yaxis().set_visible(<span class="hljs-literal">False</span>)<br>    plt.show()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">X, y = [], []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    X.append(mnist_train[i][<span class="hljs-number">0</span>]) <span class="hljs-comment"># 将第i个feature加到X中</span><br>    y.append(mnist_train[i][<span class="hljs-number">1</span>]) <span class="hljs-comment"># 将第i个label加到y中</span><br>show_fashion_mnist(X, get_fashion_mnist_labels(y))<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200214205226660.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取数据</span><br>batch_size = <span class="hljs-number">256</span><br>num_workers = <span class="hljs-number">4</span><br>train_iter = torch.utils.data.DataLoader(mnist_train, batch_size=batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=num_workers)<br>test_iter = torch.utils.data.DataLoader(mnist_test, batch_size=batch_size, shuffle=<span class="hljs-literal">False</span>, num_workers=num_workers)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">start = time.time()<br><span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>    <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.2f sec&#x27;</span> % (time.time() - start))<br></code></pre></td></tr></table></figure><pre><code class="hljs">4.64 sec</code></pre><h1 id="softmax从零开始的实现">softmax从零开始的实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;..&quot;</span>) <br><span class="hljs-keyword">import</span> d2lzh_pytorch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-built_in">print</span>(torch.__version__)<br><span class="hljs-built_in">print</span>(torchvision.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.4.0+cpu0.5.0+cpu</code></pre><h2 id="获取训练集数据和测试集数据">获取训练集数据和测试集数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, root=<span class="hljs-string">&#x27;/home/kesci/input/FashionMNIST2065&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="模型参数初始化">模型参数初始化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs = <span class="hljs-number">784</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">28</span>*<span class="hljs-number">28</span>)<br>num_outputs = <span class="hljs-number">10</span><br><br>W = torch.tensor(np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, (num_inputs, num_outputs)), dtype=torch.<span class="hljs-built_in">float</span>)<br>b = torch.zeros(num_outputs, dtype=torch.<span class="hljs-built_in">float</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">784</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">W.requires_grad_(requires_grad=<span class="hljs-literal">True</span>)<br>b.requires_grad_(requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], requires_grad=True)</code></pre><h2 id="对多维tensor按维度操作">对多维Tensor按维度操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(X.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># dim为0，按照相同的列求和，并在结果中保留列特征</span><br><span class="hljs-built_in">print</span>(X.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># dim为1，按照相同的行求和，并在结果中保留行特征</span><br><span class="hljs-built_in">print</span>(X.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">False</span>)) <span class="hljs-comment"># dim为0，按照相同的列求和，不在结果中保留列特征</span><br><span class="hljs-built_in">print</span>(X.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">False</span>)) <span class="hljs-comment"># dim为1，按照相同的行求和，不在结果中保留行特征</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[5, 7, 9]])tensor([[ 6],        [15]])tensor([5, 7, 9])tensor([ 6, 15])</code></pre><h2 id="定义softmax操作">定义softmax操作</h2><p><span class="math display">\[ \hat{y}_j = \frac{ \exp(o_j)}{\sum_{i=1}^3 \exp(o_i)} \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax</span>(<span class="hljs-params">X</span>):<br>    X_exp = X.exp()<br>    partition = X_exp.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># print(&quot;X size is &quot;, X_exp.size())</span><br>    <span class="hljs-comment"># print(&quot;partition size is &quot;, partition, partition.size())</span><br>    <span class="hljs-keyword">return</span> X_exp / partition  <span class="hljs-comment"># 这里应用了广播机制</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.rand((<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>X_prob = softmax(X)<br><span class="hljs-built_in">print</span>(X_prob, <span class="hljs-string">&#x27;\n&#x27;</span>, X_prob.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[0.1880, 0.1848, 0.2668, 0.2236, 0.1368],        [0.2251, 0.1077, 0.1563, 0.2466, 0.2644]])  tensor([1.0000, 1.0000])</code></pre><h2 id="softmax回归模型">softmax回归模型</h2><p><span class="math display">\[ \begin{aligned} \boldsymbol{o}^{(i)} &amp;= \boldsymbol{x}^{(i)} \boldsymbol{W} + \boldsymbol{b},\\ \boldsymbol{\hat{y}}^{(i)} &amp;= \text{softmax}(\boldsymbol{o}^{(i)}). \end{aligned} \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">net</span>(<span class="hljs-params">X</span>):<br>    <span class="hljs-keyword">return</span> softmax(torch.mm(X.view((-<span class="hljs-number">1</span>, num_inputs)), W) + b)<br></code></pre></td></tr></table></figure><h2 id="定义损失函数">定义损失函数</h2><p><span class="math display">\[H\left(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}\right ) = -\sum_{j=1}^q y_j^{(i)} \log \hat y_j^{(i)},\]</span></p><p><span class="math display">\[\ell(\boldsymbol{\Theta}) = \frac{1}{n} \sum_{i=1}^n H\left(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}\right ),\]</span></p><p><span class="math display">\[\ell(\boldsymbol{\Theta}) = -(1/n) \sum_{i=1}^n \log \hat y_{y^{(i)}}^{(i)}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">y_hat = torch.tensor([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>], [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>]])<br>y = torch.LongTensor([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>])<br>y_hat.gather(<span class="hljs-number">1</span>, y.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[0.1000],        [0.5000]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_entropy</span>(<span class="hljs-params">y_hat, y</span>):<br>    <span class="hljs-keyword">return</span> - torch.log(y_hat.gather(<span class="hljs-number">1</span>, y.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><h2 id="定义准确率">定义准确率</h2><p>我们模型训练完了进行模型预测的时候，会用到我们这里定义的准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):<br>    <span class="hljs-keyword">return</span> (y_hat.argmax(dim=<span class="hljs-number">1</span>) == y).<span class="hljs-built_in">float</span>().mean().item()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(accuracy(y_hat, y))<br></code></pre></td></tr></table></figure><pre><code class="hljs">0.5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 本函数已保存在d2lzh_pytorch包中方便以后使用。该函数将被逐步改进：它的完整实现将在“图像增广”一节中描述</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">data_iter, net</span>):<br>    acc_sum, n = <span class="hljs-number">0.0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>        acc_sum += (net(X).argmax(dim=<span class="hljs-number">1</span>) == y).<span class="hljs-built_in">float</span>().<span class="hljs-built_in">sum</span>().item()<br>        n += y.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> acc_sum / n<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(evaluate_accuracy(test_iter, net))<br></code></pre></td></tr></table></figure><pre><code class="hljs">0.0407</code></pre><h2 id="训练模型">训练模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs, lr = <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span><br><br><span class="hljs-comment"># 本函数已保存在d2lzh_pytorch包中方便以后使用</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch3</span>(<span class="hljs-params">net, train_iter, test_iter, loss, num_epochs, batch_size,</span><br><span class="hljs-params">              params=<span class="hljs-literal">None</span>, lr=<span class="hljs-literal">None</span>, optimizer=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        train_l_sum, train_acc_sum, n = <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>            y_hat = net(X)<br>            l = loss(y_hat, y).<span class="hljs-built_in">sum</span>()<br>            <br>            <span class="hljs-comment"># 梯度清零</span><br>            <span class="hljs-keyword">if</span> optimizer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                optimizer.zero_grad()<br>            <span class="hljs-keyword">elif</span> params <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> params[<span class="hljs-number">0</span>].grad <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>                    param.grad.data.zero_()<br>            <br>            l.backward()<br>            <span class="hljs-keyword">if</span> optimizer <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                d2l.sgd(params, lr, batch_size)<br>            <span class="hljs-keyword">else</span>:<br>                optimizer.step() <br>            <br>            <br>            train_l_sum += l.item()<br>            train_acc_sum += (y_hat.argmax(dim=<span class="hljs-number">1</span>) == y).<span class="hljs-built_in">sum</span>().item()<br>            n += y.shape[<span class="hljs-number">0</span>]<br>        test_acc = evaluate_accuracy(test_iter, net)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;epoch %d, loss %.4f, train acc %.3f, test acc %.3f&#x27;</span><br>              % (epoch + <span class="hljs-number">1</span>, train_l_sum / n, train_acc_sum / n, test_acc))<br><br>train_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, batch_size, [W, b], lr)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.7852, train acc 0.749, test acc 0.787epoch 2, loss 0.5708, train acc 0.812, test acc 0.813epoch 3, loss 0.5249, train acc 0.826, test acc 0.821epoch 4, loss 0.5014, train acc 0.833, test acc 0.819epoch 5, loss 0.4868, train acc 0.836, test acc 0.828</code></pre><h2 id="模型预测">模型预测</h2><p>现在我们的模型训练完了，可以进行一下预测，我们的这个模型训练的到底准确不准确。 现在就可以演示如何对图像进行分类了。给定一系列图像（第三行图像输出），我们比较一下它们的真实标签（第一行文本输出）和模型预测结果（第二行文本输出）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">X, y = <span class="hljs-built_in">iter</span>(test_iter).<span class="hljs-built_in">next</span>()<br><br>true_labels = d2l.get_fashion_mnist_labels(y.numpy())<br>pred_labels = d2l.get_fashion_mnist_labels(net(X).argmax(dim=<span class="hljs-number">1</span>).numpy())<br>titles = [true + <span class="hljs-string">&#x27;\n&#x27;</span> + pred <span class="hljs-keyword">for</span> true, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(true_labels, pred_labels)]<br><br>d2l.show_fashion_mnist(X[<span class="hljs-number">0</span>:<span class="hljs-number">9</span>], titles[<span class="hljs-number">0</span>:<span class="hljs-number">9</span>])<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200214205251788.png" /></p><h1 id="softmax的简洁实现">softmax的简洁实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加载各种包或者模块</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> init<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;..&quot;</span>) <br><span class="hljs-keyword">import</span> d2lzh_pytorch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-built_in">print</span>(torch.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.4.0+cpu</code></pre><h2 id="初始化参数和获取数据">初始化参数和获取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, root=<span class="hljs-string">&#x27;/home/kesci/input/FashionMNIST2065&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="定义网络模型">定义网络模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs = <span class="hljs-number">784</span><br>num_outputs = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinearNet</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_inputs, num_outputs</span>):<br>        <span class="hljs-built_in">super</span>(LinearNet, self).__init__()<br>        self.linear = nn.Linear(num_inputs, num_outputs)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>): <span class="hljs-comment"># x 的形状: (batch, 1, 28, 28)</span><br>        y = self.linear(x.view(x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> y<br>    <br><span class="hljs-comment"># net = LinearNet(num_inputs, num_outputs)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FlattenLayer</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(FlattenLayer, self).__init__()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>): <span class="hljs-comment"># x 的形状: (batch, *, *, ...)</span><br>        <span class="hljs-keyword">return</span> x.view(x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br>net = nn.Sequential(<br>        <span class="hljs-comment"># FlattenLayer(),</span><br>        <span class="hljs-comment"># LinearNet(num_inputs, num_outputs) </span><br>        OrderedDict([<br>           (<span class="hljs-string">&#x27;flatten&#x27;</span>, FlattenLayer()),<br>           (<span class="hljs-string">&#x27;linear&#x27;</span>, nn.Linear(num_inputs, num_outputs))]) <span class="hljs-comment"># 或者写成我们自己定义的 LinearNet(num_inputs, num_outputs) 也可以</span><br>        )<br></code></pre></td></tr></table></figure><h2 id="初始化模型参数">初始化模型参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">init.normal_(net.linear.weight, mean=<span class="hljs-number">0</span>, std=<span class="hljs-number">0.01</span>)<br>init.constant_(net.linear.bias, val=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], requires_grad=True)</code></pre><h2 id="定义损失函数-1">定义损失函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss() <span class="hljs-comment"># 下面是他的函数原型</span><br><span class="hljs-comment"># class torch.nn.CrossEntropyLoss(weight=None, size_average=None, ignore_index=-100, reduce=None, reduction=&#x27;mean&#x27;)</span><br></code></pre></td></tr></table></figure><h2 id="定义优化函数">定义优化函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.1</span>) <span class="hljs-comment"># 下面是函数原型</span><br><span class="hljs-comment"># class torch.optim.SGD(params, lr=, momentum=0, dampening=0, weight_decay=0, nesterov=False)</span><br></code></pre></td></tr></table></figure><h2 id="训练">训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">5</span><br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, optimizer)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.0031, train acc 0.748, test acc 0.793epoch 2, loss 0.0022, train acc 0.813, test acc 0.809epoch 3, loss 0.0021, train acc 0.825, test acc 0.821epoch 4, loss 0.0020, train acc 0.833, test acc 0.822epoch 5, loss 0.0019, train acc 0.838, test acc 0.824</code></pre>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Artificial Intelligence</category>
      
      <category>DL</category>
      
      <category>Python</category>
      
      <category>PyTorch</category>
      
      <category>CV</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Cookbook</title>
    <link href="/Programming/C-C/C++%20Cookbook/"/>
    <url>/Programming/C-C/C++%20Cookbook/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://chenxindaaa.com/Programming/C-C/C++%20Cookbook/inline/">inline</a></p><p><a href="https://chenxindaaa.com/Programming/C-C/C++%20Cookbook/Lambda%20Expression/">Lambda Expression</a></p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning</title>
    <link href="/Artificial-Intelligence/ML/ML/"/>
    <url>/Artificial-Intelligence/ML/ML/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLeaning_PCA/">PCA</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_AdaBoost/">AdaBoost</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_FP-growth/">FP-growth</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_K-NN/">K-NN</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_LogisticsRegression/">Logistics Regression</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_NoiveBayes/">Noive Bayes</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_Regression/">Regression</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachinLearning_Apriori/">Apriori</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachinLearning_Cluster/">Cluster</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachinLearning_DecisionTree/">Decision Tree</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachinLearning_SVM/">SVM</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_AHP/">Analytic Hierarchy Process</a></p><p><a href="https://chenxindaaa.com/Artificial%20Intelligence/ML/ML/MachineLearning_FCE/">Fuzzy Comprehension Evaluation</a></p>]]></content>
    
    
    <categories>
      
      <category>Artificial Intelligence</category>
      
      <category>ML</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python Cookbook</title>
    <link href="/Programming/Python/Python%20Cookbook/"/>
    <url>/Programming/Python/Python%20Cookbook/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://chenxindaaa.com/Programming/Python/Python%20Cookbook/Decorators/">Decorators</a></p><p><a href="https://chenxindaaa.com/Programming/Python/Python%20Cookbook/classmethod,staticmethod,property//">classmethod, staticmethod and property</a></p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MATLAB</title>
    <link href="/Programming/MATLAB/MATLAB/"/>
    <url>/Programming/MATLAB/MATLAB/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础01.%20.m文件/">Matlab基础01. .m文件</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础02.%20条件循环/">Matlab基础02. 条件循环</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础03.数据类型/">Matlab基础03.数据类型</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础04.结构数组/">Matlab基础04.结构数组</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础05.多维数组/">Matlab基础05.多维数组</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础05.多维数组/">Matlab基础05.多维数组</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础06.第三章习题/">Matlab基础06.第三章习题</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础07.二维图/">Matlab基础07.二维图</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础08.三维图/">Matlab基础08.三维图</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/Matlab基础09.%20图形属性设置及习题/">Matlab基础09. 图形属性设置及习题</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/matlab基础10.线性代数/">matlab基础10.线性代数</a></p><p><a href="https://chenxindaaa.com/Programming/MATLAB/MATLAB/matlab基础11.matlab在微积分中的应用/">matlab基础11.matlab在微积分中的应用</a></p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>MATLAB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
